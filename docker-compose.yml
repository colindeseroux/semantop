services:
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    environment:
      - TZ=Europe/Paris
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB_NAME=${POSTGRES_DB}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/logs:/var/log/postgresql
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      semantop:
        ipv4_address: 172.35.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    restart: always

  qdrant:
    build:
      context: ./qdrant
      dockerfile: Dockerfile
    container_name: qdrant
    environment:
      - TZ=Europe/Paris
    ports:
      - "${QDRANT_HTTP_PORT}:6333"
      - "${QDRANT_GRPC_PORT}:6334"
    volumes:
      - ./qdrant/storage:/qdrant/storage
    networks:
      semantop:
        ipv4_address: 172.35.0.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${QDRANT_HTTP_PORT}/health"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    restart: always

networks:
  semantop:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.35.0.0/16"
          gateway: "172.35.0.1"
